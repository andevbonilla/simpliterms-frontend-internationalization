import { Question } from "./Question";

interface questions {
  question1: string,
  answer1: string,
  question2: string,
  answer2: string,
  question3: string,
  answer3: string,
  question4: string,
  answer4: string
}

export const Fqas = ({
  question1,
  answer1,
  question2,
  answer2,
  question3,
  answer3,
  question4,
  answer4
}: questions) => {

  let texts = {
    question1: "What are static summaries?",
    answer1: "Static summaries are summaries that were generated by AI by premium users. So if you are subscribed to the free plan you will have every 24h access to a single static summary. If you are subscribed to the basic or pro plan all your summaries will be generated in real time by AI.",
    question2: "How can I cancel my subscription?",
    answer2: "You can cancel your subscription whenever you want, to do this go to your account, once there click on the unsubscribe button and that will be it.",
    question3: "What do credits mean?",
    answer3: "The credits are necessary so that Simpleterms can accurately track how many summaries the user is generating. For example, if you enter a page such as example.com and create a summary of its policies, and it costs 300 credits, these will be deducted from your account. So, they are fundamental for generating summaries by AI.",
    question4: "How do AI-generated summaries work in real time?",
    answer4: "If you're browsing any webpage and wish to quickly understand the privacy policies, terms of use, or similar information in under 2 minutes, just click on our extension. It efficiently scans the page for privacy policies and terms of use, and if detected, it instantly initiates the process of generating concise summaries for each in parallel. This way, you'll have the information you need in no time, making your online experience seamless and informed.",
  }

  return (
    <>
      <Question
        last={false}
        question={question1}
        answer={answer1}
      >
      </Question>

      <Question
        last={false}
        question={question2}
        answer={answer2}
      >
      </Question>

      <Question
        last={false}
        question={question3}
        answer={answer3}
      >
      </Question>

      <Question
        last={true}
        question={question4}
        answer={answer4}
      >
      </Question>
    </>
  )
}
